// Generated by gencpp from file sbus_serial/Sbus.msg
// DO NOT EDIT!


#ifndef SBUS_SERIAL_MESSAGE_SBUS_H
#define SBUS_SERIAL_MESSAGE_SBUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sbus_serial
{
template <class ContainerAllocator>
struct Sbus_
{
  typedef Sbus_<ContainerAllocator> Type;

  Sbus_()
    : header()
    , rawChannels()
    , mappedChannels()
    , failsafe(false)
    , frame_lost(false)  {
      rawChannels.assign(0);

      mappedChannels.assign(0);
  }
  Sbus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rawChannels()
    , mappedChannels()
    , failsafe(false)
    , frame_lost(false)  {
  (void)_alloc;
      rawChannels.assign(0);

      mappedChannels.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<int16_t, 16>  _rawChannels_type;
  _rawChannels_type rawChannels;

   typedef boost::array<int16_t, 16>  _mappedChannels_type;
  _mappedChannels_type mappedChannels;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;

   typedef uint8_t _frame_lost_type;
  _frame_lost_type frame_lost;





  typedef boost::shared_ptr< ::sbus_serial::Sbus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sbus_serial::Sbus_<ContainerAllocator> const> ConstPtr;

}; // struct Sbus_

typedef ::sbus_serial::Sbus_<std::allocator<void> > Sbus;

typedef boost::shared_ptr< ::sbus_serial::Sbus > SbusPtr;
typedef boost::shared_ptr< ::sbus_serial::Sbus const> SbusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sbus_serial::Sbus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sbus_serial::Sbus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sbus_serial::Sbus_<ContainerAllocator1> & lhs, const ::sbus_serial::Sbus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rawChannels == rhs.rawChannels &&
    lhs.mappedChannels == rhs.mappedChannels &&
    lhs.failsafe == rhs.failsafe &&
    lhs.frame_lost == rhs.frame_lost;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sbus_serial::Sbus_<ContainerAllocator1> & lhs, const ::sbus_serial::Sbus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sbus_serial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sbus_serial::Sbus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sbus_serial::Sbus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbus_serial::Sbus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sbus_serial::Sbus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbus_serial::Sbus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sbus_serial::Sbus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sbus_serial::Sbus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1934f89478affea7b06c825c908555cc";
  }

  static const char* value(const ::sbus_serial::Sbus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1934f89478affea7ULL;
  static const uint64_t static_value2 = 0xb06c825c908555ccULL;
};

template<class ContainerAllocator>
struct DataType< ::sbus_serial::Sbus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sbus_serial/Sbus";
  }

  static const char* value(const ::sbus_serial::Sbus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sbus_serial::Sbus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16[16] rawChannels\n"
"int16[16] mappedChannels\n"
"bool failsafe\n"
"bool frame_lost\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sbus_serial::Sbus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sbus_serial::Sbus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rawChannels);
      stream.next(m.mappedChannels);
      stream.next(m.failsafe);
      stream.next(m.frame_lost);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sbus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sbus_serial::Sbus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sbus_serial::Sbus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rawChannels[]" << std::endl;
    for (size_t i = 0; i < v.rawChannels.size(); ++i)
    {
      s << indent << "  rawChannels[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.rawChannels[i]);
    }
    s << indent << "mappedChannels[]" << std::endl;
    for (size_t i = 0; i < v.mappedChannels.size(); ++i)
    {
      s << indent << "  mappedChannels[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.mappedChannels[i]);
    }
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
    s << indent << "frame_lost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frame_lost);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SBUS_SERIAL_MESSAGE_SBUS_H
